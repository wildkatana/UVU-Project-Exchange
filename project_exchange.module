<?php
/**
 * @file
 * Code for the Project Exchange feature.
 */

include_once 'project_exchange.features.inc';

/**
 * Checks if a user has access to accept a student for a particular node
 */
function project_exchange_accept_student_access($node) {
  global $user;
  
  return ($user->uid == $node->uid);
}

/**
 * Implements hook_menu().
 */
function project_exchange_menu() {
  $items = array(); 
  $items['project_exchange/accept/%node/%user'] = array(
    'title' => 'Accept Student Application',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('project_exchange_accept_student_confirm', 2, 3),
    'access callback' => 'project_exchange_accept_student_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function project_exchange_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;
  switch($root_path){
    case 'projects' :
      $item = menu_get_item('node/add/project');
      $item['title'] = t('Add Project');
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
      break;
  }
}

/**
 * Implements hook_node_view_alter().
 */
function project_exchange_node_view_alter(&$build) {
  $project = node_load($build['#node']->nid); 
  if (isset($project->field_project_status) AND $project->field_project_status[LANGUAGE_NONE][0]['value'] != 'Open') {
    unset($build['links']['comment']);
  }
}


/**
 * Implements hook_comment_view_alter().
 */
function project_exchange_comment_view_alter(&$build) {
  if (isset($build['#node']->field_project_status) AND $build['#node']->field_project_status[LANGUAGE_NONE][0]['value'] != 'Open') {
    unset($build['links']['comment']);
  }
}

/**
 * Implements hook_comment_view().
 */
function project_exchange_comment_view($comment, $view_mode, $langcode) { 
  global $user;
  $project = node_load($comment->nid);
  if ($project->type == 'project') {
    $comment->content['links']['project_exchange'] = array(
      '#links' => array(
        array(
          'title' => t('View profile'),
          'href' => 'user/' . $comment->uid, 
        ),
      ),
    );
    if ($project->field_project_status[LANGUAGE_NONE][0]['value'] == 'Open' AND $user->uid == $project->uid AND $user->uid != $comment->uid) {
      $comment->content['links']['project_exchange']['#links'][] = array(
        'title' => t('Accept application'),
        'href' => 'project_exchange/accept/' . $project->nid . '/' . $comment->uid, 
      );
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function project_exchange_form_alter(&$form, &$form_state, $form_id) { 
  switch ($form_id) {
    case 'views_exposed_form':
      $form['submit']['#value'] = t('Search');
      break;
    
    case 'comment_node_project_form':
      /*
      $comment = db_select('comment','c')
                       ->fields('c', array('uid'))
                       ->condition('nid', $node->nid, '=')
                       ->condition('uid', $user->uid, '=')
                       ->execute()
                       ->fetchField();
      if ($comment) {// TODO - Also check if the user is the owner of the node
        // TODO - hide the comment form
        unset($form['comment_body']);
        unset($form['author']);
        unset($form['#submit']);
        unset($form['subject']);
        unset($form['actions']);
        $form['sudah'] = array(
          '#markup' => t("You have already applied for this project. You may edit your application above."),
        );
      }
      */
      break;
  }
}

/**
 * Confirm if the user wants to accept a student for a project
 */
function project_exchange_accept_student_confirm($form, &$form_state, $project, $student) {
  if ($project->nid AND $student->uid) {
    $form['#nid'] = $project->nid;
    $form['#uid'] = $student->uid;
    return confirm_form($form, t('Are you sure you want to accept %user for the %title project?', 
      array(
        '%user' => $student->name,
        '%title' => $project->title,
      )), 
      'node/' . $project->nid, t('This action cannot be undone.'), t('Confirm'));
  }
  else {
    drupal_not_found();
  }
}

/**
 * Accept a student for a project
 */
function project_exchange_accept_student_confirm_submit($form, &$form_state) {
  $project = node_load($form['#nid']);
  $student = user_load($form['#uid']);
  
  $project->field_project_status = array(LANGUAGE_NONE => array(array('value' => 'Active')));
  $project->field_student = array(LANGUAGE_NONE => array(array('target_id' => $student->uid)));
  
  node_save($project);
  
  drupal_set_message(t('%user has been accepted for project %title.', 
    array(
      '%user' => $student->name,
      '%title' => $project->title,
    )));
  $form_state['redirect'] = 'node/' . $project->nid;
}